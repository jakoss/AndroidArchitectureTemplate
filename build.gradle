buildscript {
    def ktlintVersion = libs.versions.ktlint.get()
    configurations.classpath {
        resolutionStrategy {
            force(
                    "com.pinterest.ktlint:ktlint-core:$ktlintVersion",
                    "com.pinterest.ktlint:ktlint-reporter-checkstyle:$ktlintVersion",
                    "com.pinterest.ktlint:ktlint-reporter-json:$ktlintVersion",
                    "com.pinterest.ktlint:ktlint-reporter-html:$ktlintVersion",
                    "com.pinterest.ktlint:ktlint-reporter-plain:$ktlintVersion",
                    "com.pinterest.ktlint:ktlint-reporter-sarif:$ktlintVersion",
                    "com.pinterest.ktlint:ktlint-ruleset-experimental:$ktlintVersion",
                    "com.pinterest.ktlint:ktlint-ruleset-standard:$ktlintVersion"
            )
        }
    }

    dependencies {
        // this is required for gradle version catalogs auto-complete in groovy build scripts
        classpath files(libs.class.superclass.protectionDomain.codeSource.location)
    }
}

plugins {
    alias libs.plugins.android.application apply false
    alias libs.plugins.android.library apply false
    alias libs.plugins.kotlin.android apply false
    alias libs.plugins.kotlin.kapt apply false
    alias libs.plugins.kotlin.parcelize apply false
    alias libs.plugins.kotlin.jvm apply false
    alias libs.plugins.kotlin.serialization apply false
    alias libs.plugins.ksp apply false
    alias libs.plugins.anvil apply false
    alias libs.plugins.tangle apply false
    alias libs.plugins.kotlinter apply false

    alias libs.plugins.benManesVersions
    alias libs.plugins.gradleDoctor
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
